//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.15

use super::sea_orm_active_enums::OrderStatus;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "order_")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i32,
    #[sea_orm(column_type = "Float")]
    pub total_price: f32,
    #[sea_orm(column_name = "status_")]
    pub status: OrderStatus,
    pub arrival_date: Option<Date>,
    pub creation_date: Option<Date>,
    pub user_id: Option<i32>,
    pub adress_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::address::Entity",
        from = "Column::AdressId",
        to = "super::address::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Address,
    #[sea_orm(has_many = "super::order_line::Entity")]
    OrderLine,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    User,
}

impl Related<super::address::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Address.def()
    }
}

impl Related<super::order_line::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OrderLine.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
