//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "product")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub weight: Option<i32>,
    #[sea_orm(column_type = "Decimal(Some((10, 2)))", nullable)]
    pub price: Option<Decimal>,
    pub brand_id: Option<i32>,
    pub image: Option<String>,
    pub stock_id: Option<i32>,
    pub region_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::brand::Entity",
        from = "Column::BrandId",
        to = "super::brand::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Brand,
    #[sea_orm(has_many = "super::discount::Entity")]
    Discount,
    #[sea_orm(has_many = "super::order_line::Entity")]
    OrderLine,
    #[sea_orm(has_many = "super::product_category::Entity")]
    ProductCategory,
    #[sea_orm(
        belongs_to = "super::region::Entity",
        from = "Column::RegionId",
        to = "super::region::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Region,
    #[sea_orm(
        belongs_to = "super::stock::Entity",
        from = "Column::StockId",
        to = "super::stock::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Stock,
}

impl Related<super::brand::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Brand.def()
    }
}

impl Related<super::discount::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Discount.def()
    }
}

impl Related<super::order_line::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OrderLine.def()
    }
}

impl Related<super::product_category::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProductCategory.def()
    }
}

impl Related<super::region::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Region.def()
    }
}

impl Related<super::stock::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Stock.def()
    }
}

impl Related<super::category::Entity> for Entity {
    fn to() -> RelationDef {
        super::product_category::Relation::Category.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::product_category::Relation::Product.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
